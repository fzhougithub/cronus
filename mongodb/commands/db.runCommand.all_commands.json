{
  commands: {
    _addShard: {
      help: 'Internal command, which is exported by shards. Do not call directly. Adds a new shard to a cluster.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrAbortReshardCollection: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Aborts any in-progress resharding operations for this collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrAddShard: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new shard to the cluster.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrAddShardToZone: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Validates and adds a new zone to the shard.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrBalancerCollectionStatus: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Checks whether the chunks of a given collection are in a quiesced state or there are any which need to be moved because of (1) draining shards, (2) zone violation or (3) imbalance between shards.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrBalancerStart: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrBalancerStatus: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrBalancerStop: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Controls the balancer state.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCleanupReshardCollection: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrClearJumboFlag: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Clears the jumbo flag of the chunk specified.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCollMod: {
      help: 'Internal command, which is exported by the config server. Do not call directly. Runs the collMod command on the config server, potentially updating some of the collection metadata present on the config server.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCommitChunkMigration: {
      help: 'should not be calling this directly',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCommitChunkSplit: {
      help: 'Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a SplitChunkRequest.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCommitChunksMerge: {
      help: 'Internal command, which is sent by a shard to the sharding config server. Do not call directly. Receives, validates, and processes a ConfigSvrMergeChunks',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCommitMovePrimary: {
      help: 'Reassign a new primary shard for the given database on the config server. This is an internal command only invokable on the config server, therefore do not call directly.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCommitReshardCollection: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Allows a reshard operation to enter critical section ASAP.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrConfigureCollectionBalancing: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrCreateDatabase: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Create a database.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrEnsureChunkVersionIsGreaterThan: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrMoveChunk: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Requests the balancer to move or rebalance a single chunk.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrMoveRange: {
      help: 'Internal command only invokable on the config server. Do not call directly. Requests the balancer to move a range.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRefineCollectionShardKey: {
      help: "Internal command, which is exported by the sharding config server. Do not call directly. Adds a suffix to the shard key of an existing collection ('refines the shard key').",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRemoveChunks: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Removes the chunks for the specified collectionUUID.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRemoveShard: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Removes a shard from the cluster.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRemoveShardFromZone: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Validates and removes the shard from the zone.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRemoveTags: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Removes the zone tags for the specified ns.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRenameCollectionMetadata: {
      help: 'Internal command. Do not call directly. Renames a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRepairShardedCollectionChunksHistory: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrReshardCollection: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Reshards a collection on a new shard key.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrRunRestore: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrSetAllowMigrations: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Sets the allowMigrations flag on the specified collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrSetClusterParameter: {
      help: 'Internal command, which is exported by the config servers. Do not call directly. Sets a parameter in the cluster.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrSetUserWriteBlockMode: {
      help: 'Internal command, which is exported by the config servers. Do not call directly. Sets the user write blocking mode on a sharded cluster.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _configsvrUpdateZoneKeyRange: {
      help: 'Internal command, which is exported by the sharding config server. Do not call directly. Validates and assigns a new range to a zone.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _flushDatabaseCacheUpdates: {
      help: "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _flushDatabaseCacheUpdatesWithWriteConcern: {
      help: "Internal command which waits for any pending routing table cache updates for a particular database to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _flushReshardingStateChange: {
      help: 'Internal command used by the resharding coordinator to flush state changes to the participant shards while the critical section is active.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _flushRoutingTableCacheUpdates: {
      help: "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _flushRoutingTableCacheUpdatesWithWriteConcern: {
      help: "Internal command which waits for any pending routing table cache updates for a particular namespace to be written locally. The operationTime returned in the response metadata is guaranteed to be at least as late as the last routing table cache update to the local disk. Takes a 'forceRemoteRefresh' option to make this node refresh its cache from the config server before waiting for the last refresh to be persisted.",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _getNextSessionMods: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _getUserCacheGeneration: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _isSelf: {
      help: '{ _isSelf : 1 } INTERNAL ONLY',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _killOperations: {
      help: 'Internal command -- Kill operations on the target server by OperationKey.',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _mergeAuthzCollections: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _migrateClone: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _recvChunkAbort: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _recvChunkCommit: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _recvChunkReleaseCritSec: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _recvChunkStart: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _recvChunkStatus: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrAbortReshardCollection: {
      help: 'Internal command, which is exported by the shard server. Do not call directly. Aborts any in-progress resharding operations.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCleanupReshardCollection: {
      help: 'Internal command, which is exported by the shard server. Do not call directly. Aborts and cleans up any in-progress resharding operations for this collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCloneCatalogData: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCollMod: {
      help: 'Internal command, which is exported by the primary sharding server. Do not call directly. Modifies collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCollModParticipant: {
      help: 'Internal command, which is exported by the shards. Do not call directly. Unblocks CRUD and processes collMod.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCommitReshardCollection: {
      help: 'Internal command, which is exported by the shard server. Do not call directly. Commits an in-progress resharding operations',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCompactStructuredEncryptionData: {
      help: 'Internal command. Do not call directly. Compacts a ECOC collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCreateCollection: {
      help: 'Internal command. Do not call directly. Creates a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrCreateCollectionParticipant: {
      help: 'Internal command. Do not call directly. Creates a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrDropCollection: {
      help: 'Internal command, which is exported by the primary sharding server. Do not call directly. Drops a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrDropCollectionIfUUIDNotMatching: {
      help: 'Internal command aimed to remove stale entries from the local collection catalog.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrDropCollectionParticipant: {
      help: 'Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrDropDatabase: {
      help: 'Internal command, which is exported by the primary sharding server. Do not call directly. Drops a database.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrDropDatabaseParticipant: {
      help: 'Internal command, which is exported by secondary sharding servers. Do not call directly. Participates in droping a database.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrDropIndexes: {
      help: 'Internal command. Do not call directly. Drops indexes.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrGetStatsForBalancing: {
      help: 'Internal command invoked by the config server to retrieve statistics from shard used for balancing',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrJoinMigrations: {
      help: 'Internal command invoked by the config server to join any chunk migration activity executed by the shard',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrMovePrimary: {
      help: 'should not be calling this directly',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrMoveRange: {
      help: 'Internal command invoked by the config server to move a chunk/range',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrParticipantBlock: {
      help: 'Internal command, which is exported by the shards. Do not call directly. Blocks CRUD operations.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrRefineCollectionShardKey: {
      help: 'Internal command, which is exported by the primary sharding server. Do not call directly. Refines Collection shard key.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrRenameCollection: {
      help: 'Internal command. Do not call directly. Renames a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrRenameCollectionParticipant: {
      help: 'Internal command. Do not call directly. Locally renames a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrRenameCollectionParticipantUnblock: {
      help: 'Internal command. Do not call directly. Releases the critical section of source and target collections.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrReshardCollection: {
      help: 'Internal command. Do not call directly. Reshards a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrReshardingOperationTime: {
      help: 'Internal command used by the resharding coordinator to query the elapsed and remaining time for the active resharding operation on participant shards.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrSetAllowMigrations: {
      help: 'Internal command. Do not call directly. Enable/disable migrations in a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrSetClusterParameter: {
      help: "Internal command, which is exported by the shard servers. Do not call directly. Set's the cluster parameter in the node.",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _shardsvrSetUserWriteBlockMode: {
      help: 'Internal command, which is exported by the shard servers. Do not call directly. Enables/disables user write blocking on shardsvrs.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    _transferMods: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    abortShardSplit: {
      help: 'Abort a shard split operation.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    abortTransaction: {
      help: 'Aborts a transaction',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    aggregate: {
      help: 'Runs the aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    appendOplogNote: {
      help: 'Adds a no-op entry to the oplog',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    applyOps: {
      help: 'internal (sharding)\n' +
        '{ applyOps : [ ] , preCondition : [ { ns : ... , q : ... , res : ... } ] }',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    authenticate: {
      help: 'no help defined',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    autoSplitVector: {
      help: 'Internal command returning the split points for a chunk, given the maximum chunk size.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    availableQueryOptions: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    buildInfo: {
      help: 'get version #, etc.\n{ buildinfo:1 }',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    checkShardingIndex: {
      help: 'Internal command.\n',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    cleanupOrphaned: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    cloneCollectionAsCapped: {
      help: '{ cloneCollectionAsCapped:<fromName>, toCollection:<toName>, size:<sizeInBytes> }',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterAbortTransaction: {
      help: 'Aborts a transaction',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterAggregate: {
      help: 'Runs the sharded aggregation command. See http://dochub.mongodb.org/core/aggregation for more details.',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterCommitTransaction: {
      help: 'Commits a transaction',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterDelete: {
      help: 'delete documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterFind: {
      help: 'query for documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterGetMore: {
      help: 'retrieve more documents for a cursor id',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterInsert: {
      help: 'insert documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    clusterUpdate: {
      help: 'update documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    collMod: {
      help: 'Sets collection options.\n' +
        "Example: { collMod: 'foo', viewOn: 'bar'} Example: { collMod: 'foo', index: {keyPattern: {a: 1}, expireAfterSeconds: 600} Example: { collMod: 'foo', index: {name: 'bar', expireAfterSeconds: 600} }\n",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    collStats: {
      help: '{ collStats:"blog.posts" , scale : 1 } scale divides sizes e.g. for KB use 1024\n' +
        '    avgObjSize - in bytes',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    commitShardSplit: {
      help: 'Start an opereation to split a shard into its own slice.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    commitTransaction: {
      help: 'Commits a transaction',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    compact: {
      help: 'compact collection\n' +
        'warning: this operation locks the database and is slow. you can cancel with killOp()\n' +
        '{ compact : <collection_name>, [force:<bool>] }\n' +
        '  force - allows to run on a replica set primary\n',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    compactStructuredEncryptionData: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    connPoolStats: {
      help: 'stats about connections between servers in a replica set or sharded cluster.',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    connPoolSync: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    connectionStatus: {
      help: 'no help defined',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    convertToCapped: {
      help: '{ convertToCapped:<fromCollectionName>, size:<sizeInBytes> }',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    coordinateCommitTransaction: {
      help: 'Coordinates the commit for a transaction. Only called by mongos.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    count: {
      help: 'count objects in collection',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    create: {
      help: 'explicitly creates a collection or view\n' +
        '{\n' +
        '  create: <string: collection or view name> [,\n' +
        '  capped: <bool: capped collection>,\n' +
        '  autoIndexId: <bool: automatic creation of _id index>,\n' +
        '  idIndex: <document: _id index specification>,\n' +
        '  size: <int: size in bytes of the capped collection>,\n' +
        '  max: <int: max number of documents in the capped collection>,\n' +
        '  storageEngine: <document: storage engine configuration>,\n' +
        '  validator: <document: validation rules>,\n' +
        '  validationLevel: <string: validation level>,\n' +
        '  validationAction: <string: validation action>,\n' +
        '  indexOptionDefaults: <document: default configuration for indexes>,\n' +
        '  viewOn: <string: name of source collection or view>,\n' +
        '  pipeline: <array<object>: aggregation pipeline stage>,\n' +
        '  collation: <document: default collation for the collection or view>,\n' +
        '  changeStreamPreAndPostImages: <document: pre- and post-images options for change streams>,\n' +
        '  writeConcern: <document: write concern expression for the operation>]\n' +
        '}',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    createIndexes: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    createRole: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    createUser: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    currentOp: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dataSize: {
      help: 'determine data size for a set of data in a certain range\n' +
        'example: { dataSize:"blog.posts", keyPattern:{x:1}, min:{x:10}, max:{x:55} }\n' +
        'min and max parameters are optional. They must either both be included or both omitted\n' +
        'keyPattern is an optional parameter indicating an index pattern that would be usefulfor iterating over the min/max bounds. If keyPattern is omitted, it is inferred from the structure of min. \n' +
        'note: This command may take a while to run',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dbCheck: {
      help: 'Validate replica set consistency.\n' +
        'Invoke with { dbCheck: <collection name/uuid>,\n' +
        '              minKey: <first key, exclusive>,\n' +
        '              maxKey: <last key, inclusive>,\n' +
        '              maxCount: <try to keep a batch within maxCount number of docs>,\n' +
        '              maxSize: <try to keep a batch withing maxSize of docs (bytes)>,\n' +
        '              maxCountPerSecond: <max rate in docs/sec>\n' +
        '              maxDocsPerBatch: <max number of docs/batch>\n' +
        '              maxBytesPerBatch: <try to keep a batch within max bytes/batch>\n' +
        '              maxBatchTimeMillis: <max time processing a batch in milliseconds>\n' +
        '              readTimestamp: <bool, read at a timestamp without strong locks> }\n' +
        'to check a collection.\n' +
        'Invoke with {dbCheck: 1} to check all collections in the database.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dbHash: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dbStats: {
      help: 'Get stats on a database. Not instantaneous. Slower for databases with large .ns files.\n' +
        'Example: { dbStats:1, scale:1 }',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    delete: {
      help: 'delete documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    distinct: {
      help: "{ distinct : 'collection name' , key : 'a.b' , query : {} }",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    donorAbortMigration: {
      help: 'Abort a migration',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    donorForgetMigration: {
      help: 'Forget a migration',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    donorStartMigration: {
      help: 'Start migrating databases whose names match the specified prefix to the specified replica set.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    driverOIDTest: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    drop: {
      help: 'drop a collection\n{drop : <collectionName>}',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    dropAllRolesFromDatabase: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dropAllUsersFromDatabase: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dropConnections: {
      help: 'Drop egress connections to specified host and port',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dropDatabase: {
      help: 'drop (delete) this database',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    dropIndexes: {
      help: 'drop indexes for a collection',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    dropRole: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    dropUser: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    endSessions: {
      help: 'end a set of logical sessions',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    explain: {
      help: 'explain database reads and writes',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    features: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    filemd5: {
      help: ' example: { filemd5 : ObjectId(aaaaaaa) , root : "fs" }',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    find: {
      help: 'query for documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    findAndModify: {
      help: '{ findAndModify: "collection", query: {processed:false}, update: {$set: {processed:true}}, new: true}\n' +
        '{ findAndModify: "collection", query: {processed:false}, remove: true, sort: {priority:-1}}\n' +
        'Either update or remove is required, all other fields have default values.\n' +
        'Output is in the "value" field\n',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    flushRouterConfig: {
      help: 'Flushes the cached routing information for a single collection, entire database (and its collections) or all databases, which would cause full reload from the config server on the next access.\n' +
        'Usage:\n' +
        '{flushRouterConfig: 1} flushes all databases\n' +
        "{flushRouterConfig: 'db'} flushes only the given database (and its collections)\n" +
        "{flushRouterconfig: 'db.coll'} flushes only the given collection",
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    forgetShardSplit: {
      help: 'Forget the shard split operation.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    fsync: {
      help: 'http://dochub.mongodb.org/core/fsynccommand',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    fsyncUnlock: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getClusterParameter: {
      help: 'Get in-memory cluster parameter value(s) from this node',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getCmdLineOpts: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getDatabaseVersion: {
      help: " example: { getDatabaseVersion : 'foo'  } ",
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getDefaultRWConcern: {
      help: 'get the current read/write concern defaults being applied by this node',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getDiagnosticData: {
      help: 'get latest diagnostic data collection snapshot',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getLastError: {
      help: 'no longer supported',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getLog: {
      help: "{ getLog : '*' }  OR { getLog : 'global' }",
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getMore: {
      help: 'retrieve more results from an existing cursor',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    getParameter: {
      help: 'get administrative option(s)\n' +
        'example:\n' +
        '{ getParameter:1, notablescan:1 }\n' +
        'pass a document as the value for getParameter to request options\n' +
        'example:\n' +
        '{ getParameter:{showDetails: true}, notablescan:1}\n' +
        'supported:\n' +
        '  AlwaysRecordTraffic\n' +
        '  KeysRotationIntervalSec\n' +
        '  ShardingTaskExecutorPoolHostTimeoutMS\n' +
        '  ShardingTaskExecutorPoolMaxConnecting\n' +
        '  ShardingTaskExecutorPoolMaxSize\n' +
        '  ShardingTaskExecutorPoolMaxSizeForConfigServers\n' +
        '  ShardingTaskExecutorPoolMinSize\n' +
        '  ShardingTaskExecutorPoolMinSizeForConfigServers\n' +
        '  ShardingTaskExecutorPoolRefreshRequirementMS\n' +
        '  ShardingTaskExecutorPoolRefreshTimeoutMS\n' +
        '  ShardingTaskExecutorPoolReplicaSetMatching\n' +
        '  TransactionRecordMinimumLifetimeMinutes\n' +
        '  acceptApiVersion2\n' +
        '  aggregateOperationResourceConsumptionMetrics\n' +
        '  allowDiskUseByDefault\n' +
        '  allowDocumentsGreaterThanMaxUserSize\n' +
        '  allowMultipleArbiters\n' +
        '  allowRolesFromX509Certificates\n' +
        '  authSchemaVersion\n' +
        '  authenticationMechanisms\n' +
        '  authorizationManagerCacheSize\n' +
        '  authorizationManagerPinnedUsers\n' +
        '  authorizationManagerPinnedUsersRefreshIntervalMillis\n' +
        '  automationServiceDescriptor\n' +
        '  awsEC2InstanceMetadataUrl\n' +
        '  awsECSInstanceMetadataUrl\n' +
        '  backtraceLogFile\n' +
        '  balancerChunksSelectionTimeoutMs\n' +
        '  balancerMigrationsThrottlingMs\n' +
        '  batchedDeletesTargetBatchDocs\n' +
        '  batchedDeletesTargetBatchTimeMS\n' +
        '  batchedDeletesTargetStagedDocBytes\n' +
        '  batchedExpiredChangeStreamPreImageRemoval\n' +
        '  bgSyncOplogFetcherBatchSize\n' +
        '  bsonTestValidationVersion\n' +
        '  changeSyncSourceThresholdMillis\n' +
        '  chunkDefragmentationThrottlingMS\n' +
        '  chunkMigrationConcurrency\n' +
        '  chunkMigrationFetcherMaxBufferedSizeBytesPerThread\n' +
        '  clientCursorMonitorFrequencySecs\n' +
        '  clusterAuthMode\n' +
        '  clusterIpSourceAllowlist\n' +
        '  collectionBulkLoaderBatchSizeInBytes\n' +
        '  collectionClonerBatchSize\n' +
        '  collectionClonerUsesExhaust\n' +
        '  connPoolMaxConnsPerHost\n' +
        '  connPoolMaxInUseConnsPerHost\n' +
        '  connectTimeoutMs\n' +
        '  coordinateCommitReturnImmediatelyAfterPersistingDecision\n' +
        '  createRollbackDataFiles\n' +
        '  cursorTimeoutMillis\n' +
        '  dbCheckCollectionTryLockMaxAttempts\n' +
        '  dbCheckCollectionTryLockMaxBackoffMillis\n' +
        '  dbCheckCollectionTryLockMinBackoffMillis\n' +
        '  dbCheckCollectionTryLockTimeoutMillis\n' +
        '  dbCheckHealthLogEveryNBatches\n' +
        '  defaultFindReplicaSetHostTimeoutMS\n' +
        '  deprecatedWireOpsWarningPeriodInSeconds\n' +
        '  diagnosticDataCollectionDirectoryPath\n' +
        '  diagnosticDataCollectionDirectorySizeMB\n' +
        '  diagnosticDataCollectionEnableLatencyHistograms\n' +
        '  diagnosticDataCollectionEnabled\n' +
        '  diagnosticDataCollectionFileSizeMB\n' +
        '  diagnosticDataCollectionPeriodMillis\n' +
        '  diagnosticDataCollectionSamplesPerChunk\n' +
        '  diagnosticDataCollectionSamplesPerInterimUpdate\n' +
        '  diagnosticDataCollectionStatsNamespaces\n' +
        '  diagnosticDataCollectionVerboseTCMalloc\n' +
        '  disableJavaScriptJIT\n' +
        '  disableLogicalSessionCacheRefresh\n' +
        '  disableNonSSLConnectionLogging\n' +
        '  disableNonTLSConnectionLogging\n' +
        '  disableResumableRangeDeleter\n' +
        '  disableSplitHorizonIPCheck\n' +
        '  disabledSecureAllocatorDomains\n' +
        '  documentUnitSizeBytes\n' +
        '  enableDefaultWriteConcernUpdatesForInitiate\n' +
        '  enableElectionHandoff\n' +
        '  enableFinerGrainedCatalogCacheRefresh\n' +
        '  enableFlowControl\n' +
        '  enableIndexBuildCommitQuorum\n' +
        '  enableLocalhostAuthBypass\n' +
        '  enableOverrideClusterChainingSetting\n' +
        '  enableReconfigRollbackCommittedWritesCheck\n' +
        '  enableSearchMeta\n' +
        '  enableShardedIndexConsistencyCheck\n' +
        '  enableTemporarilyUnavailableExceptions\n' +
        '  enableTestCommands\n' +
        '  enableTimeoutOfInactiveSessionCursors\n' +
        '  enforceUserClusterSeparation\n' +
        '  expiredChangeStreamPreImageRemovalJobSleepSecs\n' +
        '  fassertOnLockTimeoutForStepUpDown\n' +
        '  featureCompatibilityVersion\n' +
        '  featureFlagAlwaysCreateConfigTransactionsPartialIndexOnStepUp\n' +
        '  featureFlagBalanceAccordingToDataSize\n' +
        '  featureFlagBatchMultiDeletes\n' +
        '  featureFlagBlender\n' +
        '  featureFlagBucketUnpackWithSort\n' +
        '  featureFlagChangeStreamPreAndPostImages\n' +
        '  featureFlagChangeStreamsFurtherEnrichedEvents\n' +
        '  featureFlagChangeStreamsRewrite\n' +
        '  featureFlagChangeStreamsVisibility\n' +
        '  featureFlagClusterWideConfig\n' +
        '  featureFlagClusterWideConfigM2\n' +
        '  featureFlagClusteredIndexes\n' +
        '  featureFlagCollModIndexUnique\n' +
        '  featureFlagColumnstoreIndexes\n' +
        '  featureFlagCommandsAcceptCollectionUUID\n' +
        '  featureFlagCommonQueryFramework\n' +
        '  featureFlagConcurrencyInChunkMigration\n' +
        '  featureFlagConnHealthMetrics\n' +
        '  featureFlagDerivedMetadata\n' +
        '  featureFlagDocumentSourceListCatalog\n' +
        '  featureFlagEnableExecutionControl\n' +
        '  featureFlagEnableShardingOptional\n' +
        '  featureFlagExactTopNAccumulator\n' +
        '  featureFlagFLE2\n' +
        '  featureFlagFileCopyBasedInitialSync\n' +
        '  featureFlagFill\n' +
        '  featureFlagFryer\n' +
        '  featureFlagHealthMonitoring\n' +
        '  featureFlagInternalTransactions\n' +
        '  featureFlagLastPointQuery\n' +
        '  featureFlagLoadBalancer\n' +
        '  featureFlagLocf\n' +
        '  featureFlagMigrationRecipientCriticalSection\n' +
        '  featureFlagMongoStore\n' +
        '  featureFlagNewPersistedChunkVersionFormat\n' +
        '  featureFlagNewWriteErrorExceptionFormat\n' +
        '  featureFlagNoChangeStreamEventsDueToOrphans\n' +
        '  featureFlagNoMoreAutoSplitter\n' +
        '  featureFlagOptionalCfgSvr\n' +
        '  featureFlagOrphanTracking\n' +
        '  featureFlagPerCollBalancingSettings\n' +
        '  featureFlagQueryStats\n' +
        '  featureFlagRecoverableRefineCollectionShardKeyCoordinator\n' +
        '  featureFlagRecoverableShardsvrReshardCollectionCoordinator\n' +
        '  featureFlagRequireTenantID\n' +
        '  featureFlagResharding\n' +
        '  featureFlagRetryableFindAndModify\n' +
        '  featureFlagSBEGroupPushdown\n' +
        '  featureFlagSBELookupPushdown\n' +
        '  featureFlagSbeFull\n' +
        '  featureFlagSbePlanCache\n' +
        '  featureFlagSearchBatchSizeLimit\n' +
        '  featureFlagSearchMeta\n' +
        '  featureFlagSearchShardedFacets\n' +
        '  featureFlagSelectiveBackup\n' +
        '  featureFlagShardKeyIndexOptionalHashedSharding\n' +
        '  featureFlagShardMerge\n' +
        '  featureFlagShardSplit\n' +
        '  featureFlagShardedLookup\n' +
        '  featureFlagShardedSearchCustomSort\n' +
        '  featureFlagShardedTimeSeries\n' +
        '  featureFlagShardedTimeSeriesUpdateDelete\n' +
        '  featureFlagShardingDataTransformMetrics\n' +
        '  featureFlagSortArray\n' +
        '  featureFlagSpoon\n' +
        '  featureFlagTimeseriesBucketCompression\n' +
        '  featureFlagTimeseriesBucketCompressionWithArrays\n' +
        '  featureFlagTimeseriesMetricIndexes\n' +
        '  featureFlagTimeseriesUpdatesAndDeletes\n' +
        '  featureFlagToaster\n' +
        '  featureFlagUpdateDocumentShardKeyUsingTransactionApi\n' +
        '  featureFlagUserWriteBlocking\n' +
        '  featureFlagVectorSearchPublicPreview\n' +
        '  fileBasedInitialSyncExtendCursorTimeoutMS\n' +
        '  fileBasedInitialSyncMaxCyclesWithoutProgress\n' +
        '  fileBasedInitialSyncMaxLagSec\n' +
        '  findChunksOnConfigTimeoutMS\n' +
        '  fixedServiceExecutorRecursionLimit\n' +
        '  fixedServiceExecutorThreadLimit\n' +
        '  flowControlDecayConstant\n' +
        '  flowControlFudgeFactor\n' +
        '  flowControlMaxSamples\n' +
        '  flowControlMinTicketsPerSecond\n' +
        '  flowControlSamplePeriod\n' +
        '  flowControlTargetLagSeconds\n' +
        '  flowControlThresholdLagPercentage\n' +
        '  flowControlTicketAdderConstant\n' +
        '  flowControlTicketMultiplierConstant\n' +
        '  flowControlWarnThresholdSeconds\n' +
        '  forceRollbackViaRefetch\n' +
        '  globalConnPoolIdleTimeoutMinutes\n' +
        '  heapProfilingEnabled\n' +
        '  heapProfilingSampleIntervalBytes\n' +
        '  heartBeatFrequencyMs\n' +
        '  honorSystemUmask\n' +
        '  httpVerboseLogging\n' +
        '  indexEntryUnitSizeBytes\n' +
        '  indexMaxNumGeneratedKeysPerDocument\n' +
        '  initialServiceExecutorThreadingModel\n' +
        '  initialSyncMethod\n' +
        '  initialSyncOplogBuffer\n' +
        '  initialSyncOplogBufferPeekCacheSize\n' +
        '  initialSyncOplogFetcherBatchSize\n' +
        '  initialSyncSourceReadPreference\n' +
        '  initialSyncTransientErrorRetryPeriodSeconds\n' +
        '  internalBatchUserMultiDeletesForTest\n' +
        '  internalCascadesOptimizerDisableBranchAndBound\n' +
        '  internalCascadesOptimizerDisableGroupByAndUnionRIDIntersect\n' +
        '  internalCascadesOptimizerDisableHashJoinRIDIntersect\n' +
        '  internalCascadesOptimizerDisableIndexes\n' +
        '  internalCascadesOptimizerDisableMergeJoinRIDIntersect\n' +
        '  internalCascadesOptimizerDisableScan\n' +
        '  internalCascadesOptimizerKeepRejectedPlans\n' +
        '  internalDocumentSourceCursorBatchSizeBytes\n' +
        '  internalDocumentSourceDensifyMaxMemoryBytes\n' +
        '  internalDocumentSourceGroupMaxMemoryBytes\n' +
        '  internalDocumentSourceLookupCacheSizeBytes\n' +
        '  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n' +
        '  internalGeoNearQuery2DMaxCoveringCells\n' +
        '  internalGeoPredicateQuery2DMaxCoveringCells\n' +
        '  internalIndexBuildBulkLoadYieldIterations\n' +
        '  internalInsertMaxBatchSize\n' +
        '  internalLookupStageIntermediateDocumentMaxSizeBytes\n' +
        '  internalMaxSubPipelineViewDepth\n' +
        '  internalPartialFilterExpressionMaxDepth\n' +
        '  internalPipelineLengthLimit\n' +
        '  internalProhibitShardOperationRetry\n' +
        '  internalQueryAggMulticastMaxConcurrency\n' +
        '  internalQueryAggMulticastTimeoutMS\n' +
        '  internalQueryAlwaysMergeOnPrimaryShard\n' +
        '  internalQueryAppendIdToSetWindowFieldsSort\n' +
        '  internalQueryCacheDisableInactiveEntries\n' +
        '  internalQueryCacheEvictionRatio\n' +
        '  internalQueryCacheMaxEntriesPerCollection\n' +
        '  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n' +
        '  internalQueryCacheSize\n' +
        '  internalQueryCacheWorksGrowthCoefficient\n' +
        '  internalQueryCollectionMaxDataSizeBytesToChooseHashJoin\n' +
        '  internalQueryCollectionMaxNoOfDocumentsToChooseHashJoin\n' +
        '  internalQueryCollectionMaxStorageSizeBytesToChooseHashJoin\n' +
        '  internalQueryDefaultDOP\n' +
        '  internalQueryDesugarWhereToFunction\n' +
        '  internalQueryDisableExchange\n' +
        '  internalQueryDisableLookupExecutionUsingHashJoin\n' +
        '  internalQueryDocumentSourceWriterBatchExtraReservedBytes\n' +
        '  internalQueryEnableCSTParser\n' +
        '  internalQueryEnableCascadesOptimizer\n' +
        '  internalQueryEnableLoggingV2OplogEntries\n' +
        '  internalQueryEnableSamplingCardinalityEstimator\n' +
        '  internalQueryEnumerationMaxIntersectPerAnd\n' +
        '  internalQueryEnumerationMaxOrSolutions\n' +
        '  internalQueryEnumerationPreferLockstepOrEnumeration\n' +
        '  internalQueryExecYieldIterations\n' +
        '  internalQueryExecYieldPeriodMS\n' +
        '  internalQueryExplainSizeThresholdBytes\n' +
        '  internalQueryFLEAlwaysUseHighCardinalityMode\n' +
        '  internalQueryFLERewriteMemoryLimit\n' +
        '  internalQueryFacetBufferSizeBytes\n' +
        '  internalQueryFacetMaxOutputDocSizeBytes\n' +
        '  internalQueryForceClassicEngine\n' +
        '  internalQueryForceIntersectionPlans\n' +
        '  internalQueryGlobalProfilingFilter\n' +
        '  internalQueryIgnoreUnknownJSONSchemaKeywords\n' +
        '  internalQueryJavaScriptFnTimeoutMillis\n' +
        '  internalQueryJavaScriptHeapSizeLimitMB\n' +
        '  internalQueryMaxAddToSetBytes\n' +
        '  internalQueryMaxAllowedDensifyDocs\n' +
        '  internalQueryMaxBlockingSortMemoryUsageBytes\n' +
        '  internalQueryMaxDocValidationErrorConsideredValues\n' +
        '  internalQueryMaxJsEmitBytes\n' +
        '  internalQueryMaxNumberOfFieldsToChooseFilteredColumnScan\n' +
        '  internalQueryMaxNumberOfFieldsToChooseUnfilteredColumnScan\n' +
        '  internalQueryMaxPushBytes\n' +
        '  internalQueryMaxRangeBytes\n' +
        '  internalQueryMaxScansToExplode\n' +
        '  internalQueryPlanEvaluationCollFraction\n' +
        '  internalQueryPlanEvaluationCollF'... 8393 more characters,
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getShardMap: {
      help: 'lists the set of shards known to this instance',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getShardVersion: {
      help: " example: { getShardVersion : 'alleyinsider.foo'  } ",
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    getnonce: {
      help: 'internal',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    grantPrivilegesToRole: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    grantRolesToRole: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    grantRolesToUser: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    hello: {
      help: 'Check if this server is primary for a replica set\n{ hello : 1 }',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    hostInfo: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    insert: {
      help: 'insert documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    internalRenameIfOptionsAndIndexesMatch: {
      help: 'Internal command to rename and check collection options',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    invalidateUserCache: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    isMaster: {
      help: 'Check if this server is primary for a replica set\n{ isMaster : 1 }',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    killAllSessions: {
      help: 'kill all logical sessions, for a user, and their operations',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    killAllSessionsByPattern: {
      help: 'kill logical sessions by pattern',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    killCursors: {
      help: 'Kill a list of cursor ids',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    killOp: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    killSessions: {
      help: 'kill a logical session and its operations',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    listCollections: {
      help: 'list collections for this db',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    listCommands: {
      help: 'get a list of all db commands',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    listDatabases: {
      help: '{ listDatabases:1, [filter: <filterObject>] [, nameOnly: true ] }\n' +
        'list databases on this server',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      secondaryOverrideOk: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    listIndexes: {
      help: 'list indexes for a collection',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    lockInfo: {
      help: 'show all lock info on the server',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    logRotate: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    logout: {
      help: 'de-authenticate',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    mapReduce: {
      help: 'Runs the mapReduce command. See http://dochub.mongodb.org/core/mapreduce for details.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    mergeChunks: {
      help: 'Internal command to merge a contiguous range of chunks.\n' +
        'Usage: { mergeChunks: <ns>, epoch: <epoch>, bounds: [<min key>, <max key>] }',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    ping: {
      help: 'a way to check that the server is alive. responds immediately even if server is in a db lock.',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    planCacheClear: {
      help: 'Drops one or all plan cache entries in a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    planCacheClearFilters: {
      help: 'Clears index filter for a single query shape or, if the query shape is omitted, all filters for the collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    planCacheListFilters: {
      help: 'Displays index filters for all query shapes in a collection.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    planCacheSetFilter: {
      help: 'Sets index filter for a query shape. Overrides existing filter.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    prepareTransaction: {
      help: 'Prepares a transaction on this shard; sent by a router or re-sent by the transaction commit coordinator for a cross-shard transaction',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    profile: {
      help: 'controls the behaviour of the performance profiler, the fraction of eligible operations which are sampled for logging/profiling, and the threshold duration at which ops become eligible. See http://docs.mongodb.org/manual/reference/command/profile',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    reIndex: {
      help: 're-index a collection (can only be run on a standalone mongod)',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    recipientForgetMigration: {
      help: "Interrupts tenant migration data sync and marks that the recipient's durable state machine may be garbage collected.",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    recipientSyncData: {
      help: 'Internal replica set command; instructs the recipient to sync data as part of a tenant migration.',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    recipientVoteImportedFiles: {
      help: 'An internal mongod command to track which members have imported all donated files during a tenant migration',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    refreshSessions: {
      help: 'renew a set of logical sessions',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    renameCollection: {
      help: ' example: { renameCollection: foo.a, to: bar.b }',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetAbortPrimaryCatchUp: {
      help: '{ CmdReplSetAbortPrimaryCatchUp : 1 }\n' +
        'Abort primary catch-up mode; immediately finish the transition to primary without fetching any further unreplicated writes from any other online nodes',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetFreeze: {
      help: '{ replSetFreeze : <seconds> }\n' +
        "'freeze' state of member to the extent we can do that.  What this really means is that\n" +
        'this node will not attempt to become primary until the time period specified expires.\n' +
        'You can call again with {replSetFreeze:0} to unfreeze sooner.\n' +
        'A process restart unfreezes the member also.\n' +
        'http://dochub.mongodb.org/core/replicasetcommands',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetGetConfig: {
      help: 'Returns the current replica set configuration{ replSetGetConfig : 1 }\n' +
        'http://dochub.mongodb.org/core/replicasetcommands',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetGetRBID: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetGetStatus: {
      help: 'Report status of a replica set from the POV of this server\n' +
        '{ replSetGetStatus : 1 }\n' +
        'http://dochub.mongodb.org/core/replicasetcommands',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetHeartbeat: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetInitiate: {
      help: 'Initiate/christen a replica set.\n' +
        'http://dochub.mongodb.org/core/replicasetcommands',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetMaintenance: {
      help: '{ replSetMaintenance : bool }\nEnable or disable maintenance mode.',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetReconfig: {
      help: 'Adjust configuration of a replica set\n' +
        '{ replSetReconfig : config_object }\n' +
        'http://dochub.mongodb.org/core/replicasetcommands',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetRequestVotes: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetResizeOplog: {
      help: 'Resize oplog using size (in MBs) and optionally, retention (in terms of hours)',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetStepDown: {
      help: '{ replSetStepDown : <seconds> }\n' +
        'Step down as primary.  Will not try to reelect self for the specified time period (1 minute if no numeric secs value specified, or secs is 0).\n' +
        '(If another member with same priority takes over in the meantime, it will stay primary.)\n' +
        'http://dochub.mongodb.org/core/replicasetcommands',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetStepUp: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetSyncFrom: {
      help: '{ replSetSyncFrom : "host:port" }\n' +
        'Change who this member is syncing from. Note: This will interrupt and restart an in-progress initial sync.',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    replSetUpdatePosition: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    revokePrivilegesFromRole: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    revokeRolesFromRole: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    revokeRolesFromUser: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    rolesInfo: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    rotateCertificates: {
      help: 'Rotate certificates for new SSL connections',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    saslContinue: {
      help: 'Subsequent steps in a SASL authentication conversation.',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    saslStart: {
      help: 'First step in a SASL authentication conversation.',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    serverStatus: {
      help: 'returns lots of administrative server statistics',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setClusterParameter: {
      help: 'Set cluster parameter on replica set or node',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setDefaultRWConcern: {
      help: 'set the current read/write concern defaults (cluster-wide)',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setFeatureCompatibilityVersion: {
      help: "Set the featureCompatibilityVersion used by this cluster. If set to '5.0', then features introduced in versions greater than '5.0' will be disabled If set to '5.3', then features introduced in '6.0' will be disabled. If set to '6.0', then '6.0' features are enabled, and all nodes in the cluster must be binary version 6.0. See https://docs.mongodb.com/master/release-notes/5.0-compatibility/#feature-compatibility.",
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setIndexCommitQuorum: {
      help: 'Resets the commitQuorum for the given index builds in a collection. Usage:\n' +
        '{\n' +
        '    setIndexCommitQuorum: <string> collection name,\n' +
        '    indexNames: array<string> list of index names,\n' +
        '    commitQuorum: <string|number|object> option to define the required quorum for\n' +
        '                  the index builds to commit\n' +
        '}',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setParameter: {
      help: 'set administrative option(s)\n' +
        '{ setParameter:1, <param>:<value> }\n' +
        'supported:\n' +
        '  AlwaysRecordTraffic\n' +
        '  KeysRotationIntervalSec\n' +
        '  ShardingTaskExecutorPoolHostTimeoutMS\n' +
        '  ShardingTaskExecutorPoolMaxConnecting\n' +
        '  ShardingTaskExecutorPoolMaxSize\n' +
        '  ShardingTaskExecutorPoolMaxSizeForConfigServers\n' +
        '  ShardingTaskExecutorPoolMinSize\n' +
        '  ShardingTaskExecutorPoolMinSizeForConfigServers\n' +
        '  ShardingTaskExecutorPoolRefreshRequirementMS\n' +
        '  ShardingTaskExecutorPoolRefreshTimeoutMS\n' +
        '  ShardingTaskExecutorPoolReplicaSetMatching\n' +
        '  TransactionRecordMinimumLifetimeMinutes\n' +
        '  acceptApiVersion2\n' +
        '  aggregateOperationResourceConsumptionMetrics\n' +
        '  allowDiskUseByDefault\n' +
        '  allowDocumentsGreaterThanMaxUserSize\n' +
        '  allowMultipleArbiters\n' +
        '  allowRolesFromX509Certificates\n' +
        '  authSchemaVersion\n' +
        '  authenticationMechanisms\n' +
        '  authorizationManagerCacheSize\n' +
        '  authorizationManagerPinnedUsers\n' +
        '  authorizationManagerPinnedUsersRefreshIntervalMillis\n' +
        '  automationServiceDescriptor\n' +
        '  awsEC2InstanceMetadataUrl\n' +
        '  awsECSInstanceMetadataUrl\n' +
        '  backtraceLogFile\n' +
        '  balancerChunksSelectionTimeoutMs\n' +
        '  balancerMigrationsThrottlingMs\n' +
        '  batchedDeletesTargetBatchDocs\n' +
        '  batchedDeletesTargetBatchTimeMS\n' +
        '  batchedDeletesTargetStagedDocBytes\n' +
        '  batchedExpiredChangeStreamPreImageRemoval\n' +
        '  bgSyncOplogFetcherBatchSize\n' +
        '  bsonTestValidationVersion\n' +
        '  changeSyncSourceThresholdMillis\n' +
        '  chunkDefragmentationThrottlingMS\n' +
        '  chunkMigrationConcurrency\n' +
        '  chunkMigrationFetcherMaxBufferedSizeBytesPerThread\n' +
        '  clientCursorMonitorFrequencySecs\n' +
        '  clusterAuthMode\n' +
        '  clusterIpSourceAllowlist\n' +
        '  collectionBulkLoaderBatchSizeInBytes\n' +
        '  collectionClonerBatchSize\n' +
        '  collectionClonerUsesExhaust\n' +
        '  connPoolMaxConnsPerHost\n' +
        '  connPoolMaxInUseConnsPerHost\n' +
        '  connectTimeoutMs\n' +
        '  coordinateCommitReturnImmediatelyAfterPersistingDecision\n' +
        '  createRollbackDataFiles\n' +
        '  cursorTimeoutMillis\n' +
        '  dbCheckCollectionTryLockMaxAttempts\n' +
        '  dbCheckCollectionTryLockMaxBackoffMillis\n' +
        '  dbCheckCollectionTryLockMinBackoffMillis\n' +
        '  dbCheckCollectionTryLockTimeoutMillis\n' +
        '  dbCheckHealthLogEveryNBatches\n' +
        '  defaultFindReplicaSetHostTimeoutMS\n' +
        '  deprecatedWireOpsWarningPeriodInSeconds\n' +
        '  diagnosticDataCollectionDirectoryPath\n' +
        '  diagnosticDataCollectionDirectorySizeMB\n' +
        '  diagnosticDataCollectionEnableLatencyHistograms\n' +
        '  diagnosticDataCollectionEnabled\n' +
        '  diagnosticDataCollectionFileSizeMB\n' +
        '  diagnosticDataCollectionPeriodMillis\n' +
        '  diagnosticDataCollectionSamplesPerChunk\n' +
        '  diagnosticDataCollectionSamplesPerInterimUpdate\n' +
        '  diagnosticDataCollectionStatsNamespaces\n' +
        '  diagnosticDataCollectionVerboseTCMalloc\n' +
        '  disableJavaScriptJIT\n' +
        '  disableLogicalSessionCacheRefresh\n' +
        '  disableNonSSLConnectionLogging\n' +
        '  disableNonTLSConnectionLogging\n' +
        '  disableResumableRangeDeleter\n' +
        '  disableSplitHorizonIPCheck\n' +
        '  disabledSecureAllocatorDomains\n' +
        '  documentUnitSizeBytes\n' +
        '  enableDefaultWriteConcernUpdatesForInitiate\n' +
        '  enableElectionHandoff\n' +
        '  enableFinerGrainedCatalogCacheRefresh\n' +
        '  enableFlowControl\n' +
        '  enableIndexBuildCommitQuorum\n' +
        '  enableLocalhostAuthBypass\n' +
        '  enableOverrideClusterChainingSetting\n' +
        '  enableReconfigRollbackCommittedWritesCheck\n' +
        '  enableSearchMeta\n' +
        '  enableShardedIndexConsistencyCheck\n' +
        '  enableTemporarilyUnavailableExceptions\n' +
        '  enableTestCommands\n' +
        '  enableTimeoutOfInactiveSessionCursors\n' +
        '  enforceUserClusterSeparation\n' +
        '  expiredChangeStreamPreImageRemovalJobSleepSecs\n' +
        '  fassertOnLockTimeoutForStepUpDown\n' +
        '  featureCompatibilityVersion\n' +
        '  featureFlagAlwaysCreateConfigTransactionsPartialIndexOnStepUp\n' +
        '  featureFlagBalanceAccordingToDataSize\n' +
        '  featureFlagBatchMultiDeletes\n' +
        '  featureFlagBlender\n' +
        '  featureFlagBucketUnpackWithSort\n' +
        '  featureFlagChangeStreamPreAndPostImages\n' +
        '  featureFlagChangeStreamsFurtherEnrichedEvents\n' +
        '  featureFlagChangeStreamsRewrite\n' +
        '  featureFlagChangeStreamsVisibility\n' +
        '  featureFlagClusterWideConfig\n' +
        '  featureFlagClusterWideConfigM2\n' +
        '  featureFlagClusteredIndexes\n' +
        '  featureFlagCollModIndexUnique\n' +
        '  featureFlagColumnstoreIndexes\n' +
        '  featureFlagCommandsAcceptCollectionUUID\n' +
        '  featureFlagCommonQueryFramework\n' +
        '  featureFlagConcurrencyInChunkMigration\n' +
        '  featureFlagConnHealthMetrics\n' +
        '  featureFlagDerivedMetadata\n' +
        '  featureFlagDocumentSourceListCatalog\n' +
        '  featureFlagEnableExecutionControl\n' +
        '  featureFlagEnableShardingOptional\n' +
        '  featureFlagExactTopNAccumulator\n' +
        '  featureFlagFLE2\n' +
        '  featureFlagFileCopyBasedInitialSync\n' +
        '  featureFlagFill\n' +
        '  featureFlagFryer\n' +
        '  featureFlagHealthMonitoring\n' +
        '  featureFlagInternalTransactions\n' +
        '  featureFlagLastPointQuery\n' +
        '  featureFlagLoadBalancer\n' +
        '  featureFlagLocf\n' +
        '  featureFlagMigrationRecipientCriticalSection\n' +
        '  featureFlagMongoStore\n' +
        '  featureFlagNewPersistedChunkVersionFormat\n' +
        '  featureFlagNewWriteErrorExceptionFormat\n' +
        '  featureFlagNoChangeStreamEventsDueToOrphans\n' +
        '  featureFlagNoMoreAutoSplitter\n' +
        '  featureFlagOptionalCfgSvr\n' +
        '  featureFlagOrphanTracking\n' +
        '  featureFlagPerCollBalancingSettings\n' +
        '  featureFlagQueryStats\n' +
        '  featureFlagRecoverableRefineCollectionShardKeyCoordinator\n' +
        '  featureFlagRecoverableShardsvrReshardCollectionCoordinator\n' +
        '  featureFlagRequireTenantID\n' +
        '  featureFlagResharding\n' +
        '  featureFlagRetryableFindAndModify\n' +
        '  featureFlagSBEGroupPushdown\n' +
        '  featureFlagSBELookupPushdown\n' +
        '  featureFlagSbeFull\n' +
        '  featureFlagSbePlanCache\n' +
        '  featureFlagSearchBatchSizeLimit\n' +
        '  featureFlagSearchMeta\n' +
        '  featureFlagSearchShardedFacets\n' +
        '  featureFlagSelectiveBackup\n' +
        '  featureFlagShardKeyIndexOptionalHashedSharding\n' +
        '  featureFlagShardMerge\n' +
        '  featureFlagShardSplit\n' +
        '  featureFlagShardedLookup\n' +
        '  featureFlagShardedSearchCustomSort\n' +
        '  featureFlagShardedTimeSeries\n' +
        '  featureFlagShardedTimeSeriesUpdateDelete\n' +
        '  featureFlagShardingDataTransformMetrics\n' +
        '  featureFlagSortArray\n' +
        '  featureFlagSpoon\n' +
        '  featureFlagTimeseriesBucketCompression\n' +
        '  featureFlagTimeseriesBucketCompressionWithArrays\n' +
        '  featureFlagTimeseriesMetricIndexes\n' +
        '  featureFlagTimeseriesUpdatesAndDeletes\n' +
        '  featureFlagToaster\n' +
        '  featureFlagUpdateDocumentShardKeyUsingTransactionApi\n' +
        '  featureFlagUserWriteBlocking\n' +
        '  featureFlagVectorSearchPublicPreview\n' +
        '  fileBasedInitialSyncExtendCursorTimeoutMS\n' +
        '  fileBasedInitialSyncMaxCyclesWithoutProgress\n' +
        '  fileBasedInitialSyncMaxLagSec\n' +
        '  findChunksOnConfigTimeoutMS\n' +
        '  fixedServiceExecutorRecursionLimit\n' +
        '  fixedServiceExecutorThreadLimit\n' +
        '  flowControlDecayConstant\n' +
        '  flowControlFudgeFactor\n' +
        '  flowControlMaxSamples\n' +
        '  flowControlMinTicketsPerSecond\n' +
        '  flowControlSamplePeriod\n' +
        '  flowControlTargetLagSeconds\n' +
        '  flowControlThresholdLagPercentage\n' +
        '  flowControlTicketAdderConstant\n' +
        '  flowControlTicketMultiplierConstant\n' +
        '  flowControlWarnThresholdSeconds\n' +
        '  forceRollbackViaRefetch\n' +
        '  globalConnPoolIdleTimeoutMinutes\n' +
        '  heapProfilingEnabled\n' +
        '  heapProfilingSampleIntervalBytes\n' +
        '  heartBeatFrequencyMs\n' +
        '  honorSystemUmask\n' +
        '  httpVerboseLogging\n' +
        '  indexEntryUnitSizeBytes\n' +
        '  indexMaxNumGeneratedKeysPerDocument\n' +
        '  initialServiceExecutorThreadingModel\n' +
        '  initialSyncMethod\n' +
        '  initialSyncOplogBuffer\n' +
        '  initialSyncOplogBufferPeekCacheSize\n' +
        '  initialSyncOplogFetcherBatchSize\n' +
        '  initialSyncSourceReadPreference\n' +
        '  initialSyncTransientErrorRetryPeriodSeconds\n' +
        '  internalBatchUserMultiDeletesForTest\n' +
        '  internalCascadesOptimizerDisableBranchAndBound\n' +
        '  internalCascadesOptimizerDisableGroupByAndUnionRIDIntersect\n' +
        '  internalCascadesOptimizerDisableHashJoinRIDIntersect\n' +
        '  internalCascadesOptimizerDisableIndexes\n' +
        '  internalCascadesOptimizerDisableMergeJoinRIDIntersect\n' +
        '  internalCascadesOptimizerDisableScan\n' +
        '  internalCascadesOptimizerKeepRejectedPlans\n' +
        '  internalDocumentSourceCursorBatchSizeBytes\n' +
        '  internalDocumentSourceDensifyMaxMemoryBytes\n' +
        '  internalDocumentSourceGroupMaxMemoryBytes\n' +
        '  internalDocumentSourceLookupCacheSizeBytes\n' +
        '  internalDocumentSourceSetWindowFieldsMaxMemoryBytes\n' +
        '  internalGeoNearQuery2DMaxCoveringCells\n' +
        '  internalGeoPredicateQuery2DMaxCoveringCells\n' +
        '  internalIndexBuildBulkLoadYieldIterations\n' +
        '  internalInsertMaxBatchSize\n' +
        '  internalLookupStageIntermediateDocumentMaxSizeBytes\n' +
        '  internalMaxSubPipelineViewDepth\n' +
        '  internalPartialFilterExpressionMaxDepth\n' +
        '  internalPipelineLengthLimit\n' +
        '  internalProhibitShardOperationRetry\n' +
        '  internalQueryAggMulticastMaxConcurrency\n' +
        '  internalQueryAggMulticastTimeoutMS\n' +
        '  internalQueryAlwaysMergeOnPrimaryShard\n' +
        '  internalQueryAppendIdToSetWindowFieldsSort\n' +
        '  internalQueryCacheDisableInactiveEntries\n' +
        '  internalQueryCacheEvictionRatio\n' +
        '  internalQueryCacheMaxEntriesPerCollection\n' +
        '  internalQueryCacheMaxSizeBytesBeforeStripDebugInfo\n' +
        '  internalQueryCacheSize\n' +
        '  internalQueryCacheWorksGrowthCoefficient\n' +
        '  internalQueryCollectionMaxDataSizeBytesToChooseHashJoin\n' +
        '  internalQueryCollectionMaxNoOfDocumentsToChooseHashJoin\n' +
        '  internalQueryCollectionMaxStorageSizeBytesToChooseHashJoin\n' +
        '  internalQueryDefaultDOP\n' +
        '  internalQueryDesugarWhereToFunction\n' +
        '  internalQueryDisableExchange\n' +
        '  internalQueryDisableLookupExecutionUsingHashJoin\n' +
        '  internalQueryDocumentSourceWriterBatchExtraReservedBytes\n' +
        '  internalQueryEnableCSTParser\n' +
        '  internalQueryEnableCascadesOptimizer\n' +
        '  internalQueryEnableLoggingV2OplogEntries\n' +
        '  internalQueryEnableSamplingCardinalityEstimator\n' +
        '  internalQueryEnumerationMaxIntersectPerAnd\n' +
        '  internalQueryEnumerationMaxOrSolutions\n' +
        '  internalQueryEnumerationPreferLockstepOrEnumeration\n' +
        '  internalQueryExecYieldIterations\n' +
        '  internalQueryExecYieldPeriodMS\n' +
        '  internalQueryExplainSizeThresholdBytes\n' +
        '  internalQueryFLEAlwaysUseHighCardinalityMode\n' +
        '  internalQueryFLERewriteMemoryLimit\n' +
        '  internalQueryFacetBufferSizeBytes\n' +
        '  internalQueryFacetMaxOutputDocSizeBytes\n' +
        '  internalQueryForceClassicEngine\n' +
        '  internalQueryForceIntersectionPlans\n' +
        '  internalQueryGlobalProfilingFilter\n' +
        '  internalQueryIgnoreUnknownJSONSchemaKeywords\n' +
        '  internalQueryJavaScriptFnTimeoutMillis\n' +
        '  internalQueryJavaScriptHeapSizeLimitMB\n' +
        '  internalQueryMaxAddToSetBytes\n' +
        '  internalQueryMaxAllowedDensifyDocs\n' +
        '  internalQueryMaxBlockingSortMemoryUsageBytes\n' +
        '  internalQueryMaxDocValidationErrorConsideredValues\n' +
        '  internalQueryMaxJsEmitBytes\n' +
        '  internalQueryMaxNumberOfFieldsToChooseFilteredColumnScan\n' +
        '  internalQueryMaxNumberOfFieldsToChooseUnfilteredColumnScan\n' +
        '  internalQueryMaxPushBytes\n' +
        '  internalQueryMaxRangeBytes\n' +
        '  internalQueryMaxScansToExplode\n' +
        '  internalQueryPlanEvaluationCollFraction\n' +
        '  internalQueryPlanEvaluationCollFractionSbe\n' +
        '  internalQueryPlanEvaluationMaxResults\n' +
        '  internalQueryPlanEvaluationWorks\n' +
        '  internalQueryPlanEvaluationWorksSbe\n' +
        '  intern'... 8180 more characters,
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setProfilingFilterGlobally: {
      help: 'updates a global filter that determines which operations are eligible for logging/profiling',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setShardVersion: {
      help: 'internal',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    setUserWriteBlockMode: {
      help: 'Set whether user write blocking is enabled',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    shardingState: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    shutdown: {
      help: "Shuts down the database. Must be run against the admin database and either (1) run from localhost or (2) run while authenticated with the shutdown privilege. If the node is the primary of a replica set, waits up to 'timeoutSecs' for an electable node to be caught up before stepping down. If 'force' is false and no electable node was able to catch up, does not shut down. If the node is in state SECONDARY after the attempted stepdown, any remaining time in 'timeout' is used for quiesce mode, where the database continues to allow operations to run, but directs clients to route new operations to other replica set members.",
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    splitChunk: {
      help: 'internal command usage only\n' +
        'example:\n' +
        ' { splitChunk:"db.foo" , keyPattern: {a:1} , min : {a:100} , max: {a:200} { splitKeys : [ {a:150} , ... ], fromChunkSplitter: <bool>}',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    splitVector: {
      help: 'Internal command.\n' +
        'examples:\n' +
        '  { splitVector : "blog.post" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, maxChunkSize:200 }\n' +
        '  maxChunkSize unit in MBs\n' +
        "  May optionally specify 'maxSplitPoints' and 'maxChunkObjects' to avoid traversing the whole chunk\n" +
        '  \n' +
        '  { splitVector : "blog.post" , keyPattern:{x:1} , min:{x:10} , max:{x:20}, force: true }\n' +
        "  'force' will produce one split point even if data is small; defaults to false\n" +
        'NOTE: This command may take a while to run',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    startRecordingTraffic: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    startSession: {
      help: 'start a logical session',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    stopRecordingTraffic: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    top: {
      help: 'usage by collection, in micros ',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    update: {
      help: 'update documents',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [ '1' ],
      deprecatedApiVersions: []
    },
    updateRole: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    updateUser: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    usersInfo: {
      help: 'no help defined',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: false,
      secondaryOverrideOk: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    validate: {
      help: 'Validate contents of a namespace by scanning its data structures for correctness.\n' +
        'This is a slow operation.\n' +
        '\tAdd {full: true} option to do a more thorough check.\n' +
        '\tAdd {background: true} to validate in the background.\n' +
        '\tAdd {repair: true} to run repair mode.\n' +
        'Cannot specify both {full: true, background: true}.',
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    validateDBMetadata: {
      help: "validateDBMetadata checks that the stored metadata of a database/collection is valid within a particular API version. If 'db' parameter is specified, only runs validation against that database, if not the validation will be run againt all dbs. Similarly if 'collection' parameter is specified, the validation is only run against that collection, if not the validation is run against all collections.",
      requiresAuth: true,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    voteCommitIndexBuild: {
      help: 'Internal intra replica set command',
      requiresAuth: true,
      secondaryOk: false,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    waitForFailPoint: {
      help: 'wait for a fail point to be entered a certain number of times',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: true,
      apiVersions: [],
      deprecatedApiVersions: []
    },
    whatsmyuri: {
      help: '{whatsmyuri:1}',
      requiresAuth: false,
      secondaryOk: true,
      adminOnly: false,
      apiVersions: [],
      deprecatedApiVersions: []
    }
  },
  ok: 1,
  '$clusterTime': {
    clusterTime: Timestamp({ t: 1738540052, i: 1 }),
    signature: {
      hash: Binary.createFromBase64('AAAAAAAAAAAAAAAAAAAAAAAAAAA=', 0),
      keyId: Long('0')
    }
  },
  operationTime: Timestamp({ t: 1738540052, i: 1 })
}
