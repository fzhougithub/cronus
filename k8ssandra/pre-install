curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
$ ./get_helm.sh


To install the K8ssandra required tools and utilities (`kind`, `kubectx`, `yq`, `gnu-getopt`, and set up a `kind` multi-cluster environment) on Rocky Linux 9, follow these step-by-step instructions. Note that `setup-kind-multicluster` is not a standalone tool but refers to the process of configuring a multi-cluster setup with `kind`, and `gnu-getopt` is listed twice in your query, so I’ll address it once. I’ll provide clear commands and explanations, ensuring compatibility with Rocky Linux 9.

---

### Prerequisites
- Ensure you have a Rocky Linux 9 system with internet access.
- Install `sudo` and ensure your user has administrative privileges.
- Update the system packages:
  ```bash
  sudo dnf update -y
  ```

---

### 1. Install `kind` (Kubernetes IN Docker)
`kind` is a tool for running local Kubernetes clusters using Docker container "nodes." It’s commonly used for testing and development.

#### Steps:
1. **Install Docker (required for `kind`):**
   Rocky Linux 9 uses `podman` by default, but `kind` works best with Docker.
   ```bash
   sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
   sudo dnf install -y docker-ce docker-ce-cli containerd.io
   sudo systemctl enable --now docker
   sudo usermod -aG docker $USER
   ```
   Log out and back in to apply group changes, or use `newgrp docker`.

2. **Install `kind`:**
   Download the latest `kind` binary from the official GitHub releases.
   ```bash
   curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
   chmod +x ./kind
   sudo mv ./kind /usr/local/bin/kind
   ```

3. **Verify Installation:**
   ```bash
   kind version
   ```
   You should see output like `kind v0.23.0 ...`.

---

### 2. Install `kubectx`
`kubectx` is a utility to switch between Kubernetes contexts (clusters) easily.

#### Steps:
1. **Download `kubectx` and `kubens`:**
   `kubectx` comes with `kubens` for namespace switching. Install them from the GitHub repository.
   ```bash
   curl -Lo kubectx https://raw.githubusercontent.com/ahmetb/kubectx/v0.9.5/kubectx
   curl -Lo kubens https://raw.githubusercontent.com/ahmetb/kubectx/v0.9.5/kubens
   chmod +x kubectx kubens
   sudo mv kubectx kubens /usr/local/bin/
   ```

2. **Verify Installation:**
   ```bash
   kubectx --version
   ```
   Output should confirm the version, e.g., `kubectx 0.9.5`.

---

### 3. Install `yq`
`yq` is a lightweight command-line YAML/JSON/XML processor, useful for manipulating Kubernetes manifests.

#### Steps:
1. **Download `yq`:**
   Install the latest `yq` binary from the GitHub releases.
   ```bash
   curl -Lo yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
   chmod +x yq
   sudo mv yq /usr/local/bin/
   ```

2. **Verify Installation:**
   ```bash
   yq --version
   ```
   Output should be something like `yq (https://github.com/mikefarah/yq/) version v4.44.3`.

---

### 4. Install `gnu-getopt`
`gnu-getopt` provides the `getopt` command-line utility for parsing script options. On Rocky Linux 9, the GNU version is available in the `util-linux` package.

#### Steps:
1. **Install `util-linux` (includes `getopt`):**
   ```bash
   sudo dnf install -y util-linux
   ```

2. **Verify Installation:**
   ```bash
   getopt --version
   ```
   The output should indicate it’s the GNU `getopt`, typically included in `util-linux` (e.g., `getopt from util-linux 2.37.4`).

---

### 5. Set Up a `kind` Multi-Cluster Environment (`setup-kind-multicluster`)
K8ssandra often requires testing in a multi-cluster setup. Below is how to create two `kind` clusters to simulate a multi-cluster environment, which is useful for K8ssandra deployments.

#### Steps:
1. **Install `kubectl` (if not already installed):**
   `kubectl` is needed to interact with Kubernetes clusters.
   ```bash
   curl -Lo kubectl https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl
   chmod +x kubectl
   sudo mv kubectl /usr/local/bin/
   kubectl version --client
   ```

2. **Create Configuration Files for Clusters:**
   Create two `kind` configuration files to define clusters with unique names and ports.

   - **Cluster 1 (`kind-cluster1.yaml`):**
     ```yaml
     kind: Cluster
     apiVersion: kind.x-k8s.io/v1alpha4
     name: cluster1
     nodes:
     - role: control-plane
     kubeadmConfigPatches:
     - |
       kind: InitConfiguration
       nodeRegistration:
         kubeletExtraArgs:
           node-labels: "ingress-ready=true"
     networking:
       apiServerAddress: "0.0.0.0"
       apiServerPort: 6443
     ```

   - **Cluster 2 (`kind-cluster2.yaml`):**
     ```yaml
     kind: Cluster
     apiVersion: kind.x-k8s.io/v1alpha4
     name: cluster2
     nodes:
     - role: control-plane
     kubeadmConfigPatches:
     - |
       kind: InitConfiguration
       nodeRegistration:
         kubeletExtraArgs:
           node-labels: "ingress-ready=true"
     networking:
       apiServerAddress: "0.0.0.0"
       apiServerPort: 6444
     ```

   Save these as `kind-cluster1.yaml` and `kind-cluster2.yaml` in your working directory.

3. **Create the Clusters:**
   ```bash
   kind create cluster --config kind-cluster1.yaml
   kind create cluster --config kind-cluster2.yaml
   ```

4. **Verify Clusters:**
   List the clusters to ensure both are running.
   ```bash
   kind get clusters
   ```
   Output should include `cluster1` and `cluster2`.

5. **Switch Between Clusters with `kubectx`:**
   Check the available contexts:
   ```bash
   kubectl config get-contexts
   ```
   Switch to `cluster1`:
   ```bash
   kubectx kind-cluster1
   ```
   Switch to `cluster2`:
   ```bash
   kubectx kind-cluster2
   ```

6. **Optional: Install a CNI (e.g., Calico) on Both Clusters:**
   K8ssandra requires a Container Network Interface (CNI). Install Calico on each cluster.
   - Switch to `cluster1`:
     ```bash
     kubectx kind-cluster1
     kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
     ```
   - Switch to `cluster2`:
     ```bash
     kubectx kind-cluster2
     kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
     ```
   - Verify pods are running:
     ```bash
     kubectl get pods -n calico-system
     ```

7. **Test Multi-Cluster Access:**
   Ensure you can interact with both clusters:
   ```bash
   kubectx kind-cluster1
   kubectl get nodes
   kubectx kind-cluster2
   kubectl get nodes
   ```

---

### Verification
After completing the steps, verify all tools are installed and functional:
```bash
kind version
kubectx --version
yq --version
getopt --version
kubectl config get-contexts
kind get clusters
```

You should see two clusters (`cluster1` and `cluster2`) in the `kind` output and corresponding contexts in `kubectl config get-contexts`.

---

### Notes
- **K8ssandra-Specific Requirements:** K8ssandra may require additional tools like `helm` or `cass-operator` for deployment. If you plan to deploy K8ssandra, install `helm`:
  ```bash
  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  helm version
  ```
- **Resource Requirements:** Ensure your system has sufficient resources (at least 8GB RAM, 4 CPUs) for running multiple `kind` clusters.
- **SELinux:** Rocky Linux 9 uses SELinux in enforcing mode by default. If you encounter permission issues, consider setting SELinux to permissive mode temporarily for testing:
  ```bash
  sudo setenforce 0
  ```
  For production, create specific SELinux policies instead.
- **Cleanup:** To delete the clusters when done:
  ```bash
  kind delete cluster --name cluster1
  kind delete cluster --name cluster2
  ```

---

This setup provides a complete environment for running K8ssandra-related experiments with `kind` multi-cluster on Rocky Linux 9. If you need help deploying K8ssandra itself or have specific configurations, let me know!


