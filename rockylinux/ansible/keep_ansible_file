ANSIBLE_KEEP_REMOTE_FILES=1 ansible all -m command -a "ls -l /tmp"

Then, login to target server, in this case, I am using fzhou, 

[fzhou@rl12 ansible-tmp-1748766781.6488168-47400-280327067655468]$ pwd
/home/fzhou/.ansible/tmp/ansible-tmp-1748766781.6488168-47400-280327067655468

You can find the python script that generated for this command

You're asking a very insightful question about the overhead of Ansible's module transfer mechanism, especially for something seemingly simple like an ad-hoc check. It seems "heavy" at first glance, but there are several fundamental reasons why Ansible employs this "Ansiballz" (zipped Python module) approach:

1.  **Universality and Idempotency:**
    * **Abstraction Layer:** Ansible's core philosophy is to provide an abstraction layer over diverse operating systems and distributions. It doesn't assume specific shell versions, utilities, or even Python installations (though Python is generally required).
    * **Idempotency Logic:** Modules like `command` and `shell` often have built-in idempotency logic (`creates`, `removes`, `chdir`, error handling, result reporting). This logic needs to execute reliably on the remote host *before* the actual command is even attempted. This Python code handles those checks.
    * **Consistent Results:** By sending a self-contained module, Ansible ensures that the exact same logic (including error handling, idempotency checks, and result formatting) is executed on every remote host, regardless of its specific shell environment or default utilities.

2.  **Stateless Design (for Modules):**
    * Ansible aims for a stateless design for its modules. Each module execution should be self-contained and not rely on previous commands or environmental setup (beyond the initial connection).
    * Sending the entire module with its parameters ensures that all necessary information and logic are present for that specific execution, minimizing dependencies on the remote host's pre-existing state.

3.  **Complex Logic and Error Handling:**
    * Even a "simple" module like `command` involves more than just executing a string. It needs to:
        * Parse the arguments passed from the control node.
        * Perform pre-checks (`creates`, `removes`).
        * Handle changing directories (`chdir`).
        * Execute the command using Python's `subprocess` module (which provides robust control over `stdout`, `stderr`, and exit codes, unlike just a simple shell execution).
        * Capture `stdout`, `stderr`, and the return code.
        * Determine the `changed` status.
        * Format all results into a structured JSON output.
        * Handle potential exceptions (e.g., command not found, permissions errors).
    * All this logic is much more robustly implemented in a general-purpose programming language like Python than trying to achieve it solely with complex shell scripting across different shell environments.

4.  **Python's "Batteries Included" Philosophy & `subprocess`:**
    * Python is an excellent choice for module development because it's widely available on Linux/Unix systems and has powerful built-in libraries.
    * The `subprocess` module in Python is critical here. It allows Ansible modules to run external commands directly, with fine-grained control over their input, output, and error streams, without relying on a shell's `eval` or `exec` directly. This is precisely how the `command` module avoids shell parsing.

5.  **Result Formatting (JSON):**
    * Ansible relies heavily on structured JSON output for its internal communication and for displaying results to the user. The module on the remote host is responsible for generating this JSON. This is another reason why a Python script is necessary; it's easy to create and print JSON from Python.

6.  **Security:**
    * As discussed, separating the module logic from the direct shell execution (for the `command` module) enhances security by minimizing shell injection vulnerabilities. The Ansiballz package provides a controlled environment for this.

7.  **Performance (Mitigation):**
    * While it seems heavy, Ansible makes efforts to mitigate the overhead:
        * **Caching:** Some module files might be cached on the remote host.
        * **Efficiency of Zipped Modules:** The "Ansiballz" format is a single, often compressed, file, which is relatively efficient for transfer over SSH.
        * **Python Bytecode (`.pyc`):** Python often compiles `.py` files to `.pyc` bytecode, which is faster to load and execute.

**Why not just "send a simple string and execute it"?**

If Ansible just sent "ls -l" as a string and executed it, it would face these challenges:
* How would it know if "ls -l" actually changed anything?
* How would it implement `creates` or `removes`?
* How would it robustly capture stdout/stderr/rc in a cross-platform way?
* What if the remote shell is `csh` and not `bash`? The syntax for `if` statements or variable expansion differs.

By sending a self-contained Python module, Ansible gains **reliability, idempotency, security, and cross-platform compatibility** at the cost of a slightly larger initial transfer for each task. For enterprise automation, this trade-off is generally considered worthwhile. The "heavy work" is actually the foundation of Ansible's robustness and power.
