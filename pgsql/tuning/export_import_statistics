You're absolutely right to ask why there isn't a more automated or encapsulated way to export and import statistics in PostgreSQL, and why this functionality isn't natively supported. Let me address your questions step by step:

Why Can't We Encapsulate the Functionality in a Script?

Actually, you can encapsulate the functionality in a script! The reason it's not done automatically is that PostgreSQL doesn't provide a built-in mechanism for exporting and importing statistics because:
Statistics Are Not Designed to Be Portable:

Statistics are tightly coupled to the specific data distribution in a database. They are meant to reflect the state of the data at the time ANALYZE is run.

Exporting statistics from one database and importing them into another assumes that the data distributions are similar, which may not always be true.
Complexity of Statistics:

PostgreSQL's statistics are stored in system catalogs (pg_statistic, pg_statistic_ext, etc.) in a binary format. These catalogs are not designed to be easily manipulated or exported/imported.

The structure of these catalogs can change between PostgreSQL versions, making it risky to rely on manual exports/imports.
ANALYZE is Fast and Cheap:

PostgreSQL's ANALYZE command is designed to be fast and efficient. It samples a small subset of the data to generate statistics, so running ANALYZE on the development database is usually sufficient.

Forcing users to manually export/import statistics would add unnecessary complexity.

Why Doesn't PostgreSQL Support This Natively?

PostgreSQL doesn't natively support exporting/importing statistics for several reasons:
Philosophy of Statistics:

PostgreSQL treats statistics as transient data that should be regenerated when needed. The assumption is that the data in the database will change over time, and statistics should reflect the current state.

Exporting/importing statistics assumes that the data distribution is static, which is rarely the case in real-world applications.
Focus on Query Optimization:

PostgreSQL's query optimizer relies on statistics to make decisions, but it doesn't require exact statistics to function well. Even if the statistics are slightly outdated or not perfectly accurate, the optimizer can still generate reasonable plans.

The focus is on making ANALYZE fast and efficient, rather than on providing a mechanism to transfer statistics between databases.
Complexity of Implementation:

Implementing a robust mechanism to export/import statistics would require significant changes to PostgreSQL's internals.

It would also require handling edge cases, such as differences in data types, schema changes, or version mismatches between the source and target databases.

Why Don't People Do It?

While some people might want to export/import statistics, most developers rely on ANALYZE to regenerate statistics in the development database. Here are some reasons why:
Data Differences:

The data in the development database is often different from the production database. Exporting statistics from production and importing them into development might not reflect the actual data distribution in development.
Time and Effort:

Writing a script to export/import statistics requires significant effort, and the benefits may not outweigh the costs.

Running ANALYZE in the development database is usually faster and easier.
Alternative Approaches:

Developers often use tools like pg_dump with the --stats option (available in PostgreSQL 13 and later) to include statistics in the dump file. However, this is still experimental and not widely used.

Another approach is to use logical replication or a tool like pg_repack to replicate the data and statistics from production to development.

How to Automate the Process

If you still want to automate the process of exporting/importing statistics, you can write a script in Python, Bash, or another language. Here's an example of how you might approach it:

Step 1: Export Statistics

You can use the pg_stats and pg_statistic_ext views to export statistics:

-- Export basic statistics
COPY (
    SELECT * 
    FROM pg_stats 
    WHERE schemaname = 'public' AND tablename = 'your_table'
) TO '/tmp/stats_export.csv' WITH CSV HEADER;

-- Export extended statistics
COPY (
    SELECT 
        stxname AS statistic_name,
        stxnamespace::regnamespace AS schema_name,
        stxowner::regrole AS owner,
        stxkeys AS column_ids,
        stxkind AS statistic_types
    FROM 
        pg_statistic_ext
    WHERE 
        stxrelid = (SELECT oid FROM pg_class WHERE relname = 'your_table')
) TO '/tmp/extended_stats_export.csv' WITH CSV HEADER;

Step 2: Import Statistics

To import the statistics, you would need to:
Parse the exported CSV files.

Use the CREATE STATISTICS command to recreate extended statistics.

Use ALTER TABLE ... ALTER COLUMN ... SET STATISTICS to adjust the sampling size for basic statistics.


import csv
import psycopg2

# Connect to the development database
conn = psycopg2.connect(
    dbname="dev_db",
    user="dev_user",
    password="dev_password",
    host="dev_host",
    port="5432"
)
cur = conn.cursor()

# Read the exported extended statistics CSV
with open('/tmp/extended_stats_export.csv', 'r') as f:
    reader = csv.DictReader(f)
    for row in reader:
        statistic_name = row['statistic_name']
        schema_name = row['schema_name']
        table_name = row['table_name']
        column_ids = row['column_ids'].split()  # Assuming column IDs are space-separated
        statistic_types = row['statistic_types']

        # Map column IDs to column names (you need to query pg_attribute for this)
        # For simplicity, assume you have a function `get_column_names` that does this
        column_names = get_column_names(schema_name, table_name, column_ids)

        # Create the extended statistics
        query = f"""
        CREATE STATISTICS {schema_name}.{statistic_name} ({statistic_types}) 
        ON {', '.join(column_names)} 
        FROM {schema_name}.{table_name};
        """
        cur.execute(query)

# Commit and close
conn.commit()
cur.close()
conn.close()




However, as mentioned earlier, PostgreSQL doesn't provide a direct way to import statistics into the system catalogs. You would need to write a custom script to parse the CSV files and generate the appropriate SQL commands.

Conclusion

While it's technically possible to export and import statistics, PostgreSQL doesn't natively support this functionality because:
Statistics are tightly coupled to the data distribution.

The process is complex and error-prone.

Running ANALYZE in the development database is usually sufficient.

If you need to reproduce slow queries in development, the best approach is to:
Use pg_dump with the --stats option (if available).

Run ANALYZE in the development database.

Use a logical replication tool or a custom script to replicate the data and statistics.

If you're interested in automating this process, you could write a script to export/import statistics, but it would require significant effort and careful handling of edge cases.
