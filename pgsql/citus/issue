curl https://install.citusdata.com/community/rpm.sh | sudo bash

https://docs.citusdata.com/en/v12.0/installation/single_node_rhel.html

yum install -y citus_17.x86_64

vi /var/tellme/pgsql/data/postgresql.conf
shared_preload_libraries='citus,pg_stat_statements,pg_cron'

postgres=# \c cca
You are now connected to database "cca" as user "postgres".
cca=# create extension citus;
CREATE EXTENSION


cca=# SELECT
    relname,
    CASE relkind
        WHEN 'r' THEN 'table'
        WHEN 'v' THEN 'view'
        WHEN 'm' THEN 'materialized view'
        WHEN 'i' THEN 'index'
        WHEN 'S' THEN 'sequence'
        WHEN 't' THEN 'TOAST table'
        WHEN 'c' THEN 'composite type'
        WHEN 'p' THEN 'partitioned table'
        WHEN 'I' THEN 'partitioned index'
        ELSE relkind::text
    END AS relation_type
FROM
    pg_class
WHERE
    relname LIKE 'citus%';
            relname            | relation_type
-------------------------------+---------------
 citus_dist_stat_activity      | view
 citus_lock_waits              | view
 citus_locks                   | view
 citus_schemas                 | view
 citus_shard_indexes_on_worker | view
 citus_shards                  | view
 citus_shards_on_worker        | view
 citus_stat_activity           | view
 citus_stat_statements         | view
 citus_stat_tenants            | view
 citus_stat_tenants_local      | view
 citus_tables                  | view
(12 rows)

create user butterfly with password 'butterfly_1';
create role  xci_butterfly;
alter schema  xci_butterfly owner to  xci_butterfly;
GRANT xci_butterfly TO butterfly;
ALTER USER butterfly SET search_path TO xci_butterfly, public;

cca=> SELECT
    relname
FROM
    pg_class
WHERE
    oid IN (SELECT partrelid FROM pg_partitioned_table);
         relname
-------------------------
 kafka_event_load
 ban_lookup_load
 bby_daily_load
 bby_daily_stage
 butterfly_events_stage
 call_metadata_load
 call_metadata_stage
 call_order_load
 call_order_stage
 call_tagged_load
 call_tagged_stage
 cluster_metadata2
 cluster_metadata3
 process_log
 quote_to_bill_load
 rcc_load
 rcc_stage
 shard_metadata
 speed_availability_load
 transcript_load
 transcript_stage
(21 rows)

cca=# SELECT
    c.relname
FROM
    pg_class c
WHERE
    c.oid IN (SELECT pt.partrelid FROM pg_partitioned_table pt);
         relname
-------------------------
 kafka_event_load
 ban_lookup_load
 bby_daily_load
 bby_daily_stage
 butterfly_events_stage
 call_metadata_load
 call_metadata_stage
 call_order_load
 call_order_stage
 call_tagged_load
 call_tagged_stage
 cluster_metadata2
 cluster_metadata3
 process_log
 quote_to_bill_load
 rcc_load
 rcc_stage
 shard_metadata
 speed_availability_load
 transcript_load
 transcript_stage
(21 rows)


cca=> SELECT
    typname AS data_type,
    COUNT(*) AS column_count
FROM
    pg_attribute a
    JOIN pg_class c ON a.attrelid = c.oid
    JOIN pg_namespace n ON c.relnamespace = n.oid
    JOIN pg_type t ON a.atttypid = t.oid
WHERE
    n.nspname = 'xci_butterfly'
    AND c.relname = 'cluster_metadata2'
    AND a.attnum > 0  -- exclude system columns
GROUP BY
    typname
ORDER BY
    column_count DESC;
 data_type | column_count
-----------+--------------
 text      |           87
 jsonb     |           25
 int4      |           18
 timestamp |           10
 date      |            2
 int8      |            2
 tsvector  |            2
 time      |            1
 json      |            1
 numeric   |            1
(10 rows)

cca=> SELECT
    COUNT(*) AS column_count
FROM
    pg_attribute a
    JOIN pg_class c ON a.attrelid = c.oid
    JOIN pg_namespace n ON c.relnamespace = n.oid
    JOIN pg_type t ON a.atttypid = t.oid
WHERE
    n.nspname = 'xci_butterfly'
    AND c.relname = 'cluster_metadata2'
    AND a.attnum > 0  -- exclude system columns
;

cca=> \e
 column_count
--------------
          149
(1 row)



ALTER USER butterfly SET search_path TO xci_butterfly, public;



cca=> SELECT
    a.attname AS column_name,
    typname AS data_type
FROM
    pg_attribute a
    JOIN pg_class c ON a.attrelid = c.oid
    JOIN pg_namespace n ON c.relnamespace = n.oid
    JOIN pg_type t ON a.atttypid = t.oid
WHERE
    n.nspname = 'xci_butterfly'
    AND c.relname = 'cluster_metadata2'
    AND a.attnum > 0  -- exclude system columns
    AND t.typname = 'jsonb'
ORDER BY
    a.attname;
               column_name                | data_type
------------------------------------------+-----------
 auto_fle                                 | jsonb
 auto_ple                                 | jsonb
 call_procedure                           | jsonb
 compliance                               | jsonb
 data_supervisor_name                     | jsonb
 data_task_attributes_conference          | jsonb
 data_task_attributes_ivr_context         | jsonb
 data_task_attributes_zd_custom_tags      | jsonb
 data_team_name                           | jsonb
 data_worker_attributes_roles             | jsonb
 data_worker_attributes_routing           | jsonb
 data_worker_attributes_subscribed_queues | jsonb
 data_worker_attributes_supervisors       | jsonb
 escalation                               | jsonb
 extract_entity                           | jsonb
 media_content                            | jsonb
 motive                                   | jsonb
 profanity                                | jsonb
 rules_outcome                            | jsonb
 sentiment                                | jsonb
 simulation_data                          | jsonb
 speaker_turns                            | jsonb
 wrapup_data                              | jsonb
 xv_journal_metrics                       | jsonb
 xv_system_journal                        | jsonb
(25 rows)


cca=> \e
               column_name                | data_type
------------------------------------------+-----------
 agent_approval_status                    | text
 auto_scoring                             | text
 auto_summary                             | text
 call_direction                           | text
 call_recording_id                        | text
 customer_number                          | text
 customer_state                           | text
 data_account_sid                         | text
 data_customer_attributes_member_name     | text
 data_event_description                   | text
 data_event_type                          | text
 data_resource_sid                        | text
 data_resource_type                       | text
 data_sid                                 | text
 data_task_assignment_status              | text
 data_task_attributes_account_sid         | text
 data_task_attributes_call_sid            | text
 data_task_attributes_called              | text
 data_task_attributes_called_city         | text
 data_task_attributes_called_country      | text
 data_task_attributes_called_state        | text
 data_task_attributes_caller              | text
 data_task_attributes_caller_city         | text
 data_task_attributes_caller_country      | text
 data_task_attributes_caller_state        | text
 data_task_attributes_direction           | text
 data_task_attributes_from                | text
 data_task_attributes_from_city           | text
 data_task_attributes_from_country        | text
 data_task_attributes_from_state          | text
 data_task_attributes_name                | text
 data_task_attributes_outbound_to         | text
 data_task_attributes_to                  | text
 data_task_attributes_to_city             | text
 data_task_attributes_to_country          | text
 data_task_attributes_to_state            | text
 data_task_attributes_transfer_to_ivr_url | text
 data_task_attributes_type                | text
 data_task_channel_sid                    | text
 data_task_queue_name                     | text
 data_task_queue_sid                      | text
 data_task_queue_target_expression        | text
 data_task_sid                            | text
 data_task_transfer_sid                   | text
 data_transfer_initiating_reservation_sid | text
 data_transfer_initiating_worker_sid      | text
 data_transfer_mode                       | text
 data_transfer_status                     | text
 data_transfer_to                         | text
 data_transfer_type                       | text
 data_worker_activity_name                | text
 data_worker_activity_sid                 | text
 data_worker_attributes_account_id        | text
 data_worker_attributes_client_id         | text
 data_worker_attributes_contact_uri       | text
 data_worker_attributes_delivery_center   | text
 data_worker_attributes_email             | text
 data_worker_attributes_full_name         | text
 data_worker_attributes_fullname          | text
 data_worker_attributes_image_url         | text
 data_worker_geo                          | text
 data_worker_name                         | text
 data_worker_previous_activity_name       | text
 data_worker_previous_activity_sid        | text
 data_worker_session_id                   | text
 data_worker_shift                        | text
 data_worker_sid                          | text
 data_workflow_name                       | text
 data_workflow_sid                        | text
 data_workspace_name                      | text
 data_workspace_sid                       | text
 day_of_week                              | text
 interaction_type                         | text
 metadata_account_id                      | text
 metadata_brand_id                        | text
 metadata_channel_unique_name             | text
 metadata_client_id                       | text
 metadata_conversation_uuid               | text
 metadata_event_id                        | text
 metadata_event_provider                  | text
 metadata_event_type                      | text
 metadata_interaction_start_time          | text
 metadata_interaction_state               | text
 metadata_interaction_uuid                | text
 qa_email                                 | text
 queue_name                               | text
 xv_system_load_table_id_list             | text
(87 rows)


# PostgreSQL JSONB Query Operators with Examples

JSONB in PostgreSQL provides powerful operators for querying JSON data efficiently. Here are the most important JSONB operators with example queries:

## 1. Containment Operators (`@>`, `<@`)

```sql
-- Check if JSONB contains another JSON (top-level)
SELECT * FROM products 
WHERE attributes @> '{"color": "red"}';

-- Check if JSONB is contained within another JSON
SELECT * FROM products 
WHERE attributes <@ '{"color": "red", "size": "large"}';
```

## 2. Key Existence Operators (`?`, `?|`, `?&`)

```sql
-- Check if key exists (top-level)
SELECT * FROM products 
WHERE attributes ? 'color';

-- Check if any of these keys exist
SELECT * FROM products 
WHERE attributes ?| array['color', 'size'];

-- Check if all of these keys exist
SELECT * FROM products 
WHERE attributes ?& array['color', 'size'];
```

## 3. Path Operators (`->`, `->>`, `#>`, `#>>`)

```sql
-- Get JSON object field as JSONB (returns JSONB)
SELECT attributes->'color' FROM products;

-- Get JSON object field as TEXT (returns string)
SELECT attributes->>'color' FROM products;

-- Get JSON object at path (returns JSONB)
SELECT attributes#>'{details,size}' FROM products;

-- Get JSON object at path as TEXT
SELECT attributes#>>'{details,size}' FROM products;
```

## 4. JSONB Path Query Examples

```sql
-- Find products with specific nested value
SELECT * FROM products 
WHERE attributes @> '{"details": {"size": "XL"}}';

-- Find products where reviews array contains a 5-star rating
SELECT * FROM products 
WHERE attributes @> '{"reviews": [{"rating": 5}]}';

-- Find products with warranty period > 12 months
SELECT * FROM products 
WHERE (attributes->>'warranty_months')::int > 12;
```

## 5. Indexing Examples for JSONB

```sql
-- GIN index for general JSONB queries
CREATE INDEX idx_products_attributes_gin ON products USING gin(attributes);

-- GIN index for specific operator class (faster for certain queries)
CREATE INDEX idx_products_attributes_path_ops ON products 
USING gin(attributes jsonb_path_ops);

-- B-tree index on a specific JSONB field
CREATE INDEX idx_products_color ON products 
USING btree((attributes->>'color'));
```

## 6. Advanced JSONB Query Techniques

```sql
-- Update specific JSONB field
UPDATE products 
SET attributes = jsonb_set(attributes, '{warranty_months}', '24')
WHERE id = 123;

-- Append to a JSONB array
UPDATE products 
SET attributes = jsonb_set(
  attributes,
  '{reviews}',
  (attributes->'reviews') || '{"rating": 5, "comment": "Great!"}'::jsonb
);

-- Remove a key from JSONB
UPDATE products 
SET attributes = attributes - 'discontinued';
```

These operators allow you to efficiently query and manipulate JSONB data in PostgreSQL, especially when combined with proper indexing strategies.


